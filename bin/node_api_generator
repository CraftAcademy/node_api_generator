#!/usr/bin/env node

const program = require('commander');
const mkdirp = require('mkdirp');
const os = require('os');
const fs = require('fs');
const path = require('path');
const readline = require('readline');
const sortedObject = require('sorted-object');

const _exit = process.exit;
const eol = os.EOL;
const pkg = require('../package.json');

const version = pkg['cli-name'];

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit

// CLI

before(program, 'outputHelp', function () {
  this.allowUnknownOption();
});

program
  .version(version)
  .usage('[options] [dir]')
  .option('    --git', 'add .gitignore')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

if (!exit.exited) {
  main();
}

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  const old = obj[method];

  obj[method] = function () {
    fn.call(this);
    old.apply(this, arguments);
  };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplication(app_name, path) {
  let wait = 10;

  console.log();
  function complete() {
    if (--wait) return;
    const prompt = launchedFromCmd() ? '>' : '$';

    console.log();
    console.log('   install dependencies:');
    console.log('     %s cd %s && yarn', prompt, path);
    console.log();
    console.log('   run the app:');

    if (launchedFromCmd()) {
      console.log('     %s SET DEBUG=%s:* & yarn start', prompt, app_name);
    } else {
      console.log('     %s DEBUG=%s:* yarn start', prompt, app_name);
    }

    console.log();
  }

  // Templates
  let controller = loadTemplate('js/controllers/resourceController.js')
  let database = loadTemplate('js/database/config/config.json')
  let models = loadTemplate('js/models/index.js')
  let routes = loadTemplate('js/routes/index.js');
  let factories = loadTemplate('js/specs/factories/index.js')
  let helpers = loadTemplate('js/specs/helpers/index.js')
  let requestSpecTemplate = loadTemplate('js/specs/requests/getResource.feature.js')
  let modelSpecTemplate = loadTemplate('js/specs/models/model.spec.js')
  let app = loadTemplate('js/app.js');
  let www = loadTemplate('js/www');
  let sequelizerc = loadTemplate('js/sequelizerc')


  mkdir(path, () => {
    // package.json
    const pkg = {
      name: app_name
      , version: '0.0.0'
      , private: true
      , scripts: {
        "start": "node ./bin/www",
        "start:dev": "nodemon --inspect ./bin/www",
        "test": "NODE_ENV=test NODE_NO_WARNINGS=1 mocha specs/**/*.{spec,feature}.js --recursive --exit "
      }, dependencies: {
        "cookie-parser": "^1.4.5",
        "express": "^4.17.1",
        "pg": "^8.5.1",
        "pg-hstore": "^2.3.3",
        "sequelize": "^6.5.0"
      }, devDependencies: {
        "chai": "^4.2.0",
        "factory-girl": "^5.0.4",
        "mocha": "^8.1.2",
        "nodemon": "^2.0.4",
        "supertest": "^4.0.2",
        "sinon": "^9.2.4",
        "sinon-chai": "^3.5.0",
        "faker": "^5.5.0"
      }
    }

    // routes
    mkdir(path + '/routes', () => {
      write(path + '/routes/index.js', routes);
      complete();
    });

    // controllers
    mkdir(path + '/controllers', () => {
      write(path + '/controllers/resourceController.js', controller);
      complete();
    });

    // database
    mkdir(path + '/database/')
    // config
    mkdir(path + '/database/config', () => {
      database = database.replace('{name}', app_name);
      database = database.replace('{name}', app_name);
      write(path + '/database/config/config.json', database);
      complete();
    });

    // migrations
    mkdir(path + '/database/migrations', () => {
      write(path + '/database/migrations/.keep', '');
      complete();
    });

    // seeders
    mkdir(path + '/database/seeders', () => {
      write(path + '/database/seeders/.keep', '');
      complete();
    });

    // models
    mkdir(path + '/models', () => {
      write(path + '/models/index.js', models);
      complete();
    });

    // specs
    mkdir(path + '/specs/')

    // factories
    mkdir(path + '/specs/factories', () => {
      write(path + '/specs/factories/index.js', factories);
      complete();
    });

    // helpers
    mkdir(path + '/specs/helpers', () => {
      write(path + '/specs/helpers/index.js', helpers);
      complete();
    });

    mkdir(path + '/specs/models', () => {
      write(path + '/specs/models/model.spec.js', modelSpecTemplate);
      complete();
    });

    // request/feature specs
    mkdir(path + '/specs/requests', () => {
      write(path + '/specs/requests/getResource.feature.js', requestSpecTemplate);
      complete();
    });

    // sort dependencies like npm(1)
    pkg.dependencies = sortedObject(pkg.dependencies);

    // write files
    write(path + '/package.json', JSON.stringify(pkg, null, 2));
    write(path + '/app.js', app);
    write(path + '/.sequelizerc', sequelizerc);
    mkdir(path + '/bin', () => {
      www = www.replace('{name}', app_name);
      write(path + '/bin/www', www, 0755);
      complete();
    });

    if (program.git) {
      write(path + '/.gitignore', loadTemplate('js/gitignore'));
    }

    complete();
  });
}

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function (err, files) {
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if (!(draining--)) _exit(code);
  }

  let draining = 0;
  const streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function (stream) {
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

/**
 * Determine if launched from cmd.exe
 */

function launchedFromCmd() {
  return process.platform === 'win32'
    && process.env._ === undefined;
}

/**
 * Load template file.
 */

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

/**
 * Main program.
 */

function main() {
  // Path
  const destinationPath = program.args.shift() || '.';

  // App name
  const appName = path.basename(path.resolve(destinationPath));

  // Template engine
  // program.template = 'jade';
  // if (program.ejs) program.template = 'ejs';
  // if (program.hogan) program.template = 'hjs';
  // if (program.hbs) program.template = 'hbs';

  // Generate application
  emptyDirectory(destinationPath, function (empty) {
    if (empty || program.force) {
      createApplication(appName, destinationPath);
    } else {
      confirm('destination is not empty, continue? [y/N] ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          createApplication(appName, destinationPath);
        } else {
          console.error('aborting');
          exit(1);
        }
      });
    }
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function (err) {
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}
